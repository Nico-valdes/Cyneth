require('dotenv').config({ path: '.env' });
const { connectToDatabase } = require('../libs/mongoConnect');

async function optimizeDatabase() {
  try {
    console.log('üöÄ Conectando a MongoDB para optimizaci√≥n...');
    const client = await connectToDatabase();
    const db = client.db('cyneth');
    
    console.log('‚úÖ Conectado exitosamente a MongoDB!');
    
    // ===== VERIFICAR √çNDICES EXISTENTES =====
    console.log('\nüîç Verificando √≠ndices existentes...');
    
    const existingProductsIndexes = await db.collection('products').indexes();
    const existingCategoriesIndexes = await db.collection('categories').indexes();
    const existingSubcategoriesIndexes = await db.collection('subcategories').indexes();
    
    console.log(`üìä Products: ${existingProductsIndexes.length} √≠ndices existentes`);
    console.log(`üìä Categories: ${existingCategoriesIndexes.length} √≠ndices existentes`);
    console.log(`üìä Subcategories: ${existingSubcategoriesIndexes.length} √≠ndices existentes`);
    
    // ===== OPTIMIZAR COLECCI√ìN PRODUCTS =====
    console.log('\nüì¶ Optimizando colecci√≥n products...');
    
    // Funci√≥n para verificar si un √≠ndice ya existe
    const indexExists = (collection, indexName) => {
      return existingProductsIndexes.some(idx => idx.name === indexName);
    };
    
    const categoryIndexExists = (collection, indexName) => {
      return existingCategoriesIndexes.some(idx => idx.name === indexName);
    };
    
    const subcategoryIndexExists = (collection, indexName) => {
      return existingSubcategoriesIndexes.some(idx => idx.name === indexName);
    };
    
    // √çndice compuesto para consultas m√°s frecuentes
    if (!indexExists('products', 'idx_active_category_subcategory_created')) {
      try {
        await db.collection('products').createIndex(
          { active: 1, category: 1, subcategory: 1, createdAt: -1 },
          { name: 'idx_active_category_subcategory_created' }
        );
        console.log('‚úÖ √çndice compuesto creado');
      } catch (error) {
        console.log('‚ö†Ô∏è √çndice compuesto ya existe o no se pudo crear');
      }
    } else {
      console.log('‚úÖ √çndice compuesto ya existe');
    }
    
    // √çndice para b√∫squedas por marca
    if (!indexExists('products', 'idx_active_brand')) {
      try {
        await db.collection('products').createIndex(
          { active: 1, brand: 1 },
          { name: 'idx_active_brand' }
        );
        console.log('‚úÖ √çndice de marca creado');
      } catch (error) {
        console.log('‚ö†Ô∏è √çndice de marca ya existe o no se pudo crear');
      }
    } else {
      console.log('‚úÖ √çndice de marca ya existe');
    }
    
    // √çndice para b√∫squedas por SKU (verificar si ya existe)
    const skuIndexExists = existingProductsIndexes.some(idx => 
      idx.key && idx.key.sku === 1
    );
    
    if (!skuIndexExists) {
      try {
        await db.collection('products').createIndex(
          { sku: 1 },
          { unique: true, name: 'idx_sku_unique' }
        );
        console.log('‚úÖ √çndice de SKU creado');
      } catch (error) {
        console.log('‚ö†Ô∏è √çndice de SKU ya existe o no se pudo crear');
      }
    } else {
      console.log('‚úÖ √çndice de SKU ya existe');
    }
    
    // √çndice para variantes de color
    if (!indexExists('products', 'idx_color_variants_sku')) {
      try {
        await db.collection('products').createIndex(
          { 'colorVariants.sku': 1 },
          { name: 'idx_color_variants_sku' }
        );
        console.log('‚úÖ √çndice de variantes de color creado');
      } catch (error) {
        console.log('‚ö†Ô∏è √çndice de variantes de color ya existe o no se pudo crear');
      }
    } else {
      console.log('‚úÖ √çndice de variantes de color ya existe');
    }
    
    // √çndice de texto para b√∫squedas
    const textIndexExists = existingProductsIndexes.some(idx => 
      idx.name === 'idx_text_search' || idx.key && idx.key.name === 'text'
    );
    
    if (!textIndexExists) {
      try {
        await db.collection('products').createIndex(
          { name: 'text', description: 'text', tags: 'text' },
          { 
            name: 'idx_text_search',
            weights: {
              name: 10,
              description: 5,
              tags: 3
            }
          }
        );
        console.log('‚úÖ √çndice de texto creado');
      } catch (error) {
        console.log('‚ö†Ô∏è √çndice de texto ya existe o no se pudo crear');
      }
    } else {
      console.log('‚úÖ √çndice de texto ya existe');
    }
    
    // √çndice para slug
    const slugIndexExists = existingProductsIndexes.some(idx => 
      idx.key && idx.key.slug === 1
    );
    
    if (!slugIndexExists) {
      try {
        await db.collection('products').createIndex(
          { slug: 1 },
          { unique: true, name: 'idx_slug_unique' }
        );
        console.log('‚úÖ √çndice de slug creado');
      } catch (error) {
        console.log('‚ö†Ô∏è √çndice de slug ya existe o no se pudo crear');
      }
    } else {
      console.log('‚úÖ √çndice de slug ya existe');
    }
    
    console.log('‚úÖ √çndices de products verificados!');
    
    // ===== OPTIMIZAR COLECCI√ìN CATEGORIES =====
    console.log('\nüìÇ Optimizando colecci√≥n categories...');
    
    if (!categoryIndexExists('categories', 'idx_category_slug_unique')) {
      try {
        await db.collection('categories').createIndex(
          { slug: 1 },
          { unique: true, name: 'idx_category_slug_unique' }
        );
        console.log('‚úÖ √çndice de slug de categor√≠a creado');
      } catch (error) {
        console.log('‚ö†Ô∏è √çndice de slug de categor√≠a ya existe o no se pudo crear');
      }
    } else {
      console.log('‚úÖ √çndice de slug de categor√≠a ya existe');
    }
    
    if (!categoryIndexExists('categories', 'idx_category_active_order')) {
      try {
        await db.collection('categories').createIndex(
          { active: 1, order: 1 },
          { name: 'idx_category_active_order' }
        );
        console.log('‚úÖ √çndice de orden de categor√≠a creado');
      } catch (error) {
        console.log('‚ö†Ô∏è √çndice de orden de categor√≠a ya existe o no se pudo crear');
      }
    } else {
      console.log('‚úÖ √çndice de orden de categor√≠a ya existe');
    }
    
    console.log('‚úÖ √çndices de categories verificados!');
    
    // ===== OPTIMIZAR COLECCI√ìN SUBCATEGORIES =====
    console.log('\nüìÅ Optimizando colecci√≥n subcategories...');
    
    if (!subcategoryIndexExists('subcategories', 'idx_subcategory_slug_unique')) {
      try {
        await db.collection('subcategories').createIndex(
          { slug: 1 },
          { unique: true, name: 'idx_subcategory_slug_unique' }
        );
        console.log('‚úÖ √çndice de slug de subcategor√≠a creado');
      } catch (error) {
        console.log('‚ö†Ô∏è √çndice de slug de subcategor√≠a ya existe o no se pudo crear');
      }
    } else {
      console.log('‚úÖ √çndice de slug de subcategor√≠a ya existe');
    }
    
    if (!subcategoryIndexExists('subcategories', 'idx_subcategory_category_active_order')) {
      try {
        await db.collection('subcategories').createIndex(
          { categoryId: 1, active: 1, order: 1 },
          { name: 'idx_subcategory_category_active_order' }
        );
        console.log('‚úÖ √çndice de orden de subcategor√≠a creado');
      } catch (error) {
        console.log('‚ö†Ô∏è √çndice de orden de subcategor√≠a ya existe o no se pudo crear');
      }
    } else {
      console.log('‚úÖ √çndice de orden de subcategor√≠a ya existe');
    }
    
    console.log('‚úÖ √çndices de subcategories verificados!');
    
    // ===== VERIFICAR √çNDICES FINALES =====
    console.log('\nüîç Verificando √≠ndices finales...');
    
    const finalProductsIndexes = await db.collection('products').indexes();
    const finalCategoriesIndexes = await db.collection('categories').indexes();
    const finalSubcategoriesIndexes = await db.collection('subcategories').indexes();
    
    console.log(`üìä Products: ${finalProductsIndexes.length} √≠ndices totales`);
    console.log(`üìä Categories: ${finalCategoriesIndexes.length} √≠ndices totales`);
    console.log(`üìä Subcategories: ${finalSubcategoriesIndexes.length} √≠ndices totales`);
    
    console.log('\nüéâ ¬°Base de datos optimizada exitosamente!');
    console.log('üí° Los √≠ndices mejorar√°n significativamente el rendimiento de las consultas.');
    console.log('üöÄ Ahora puedes probar el m√©todo optimizado findWithCategories()');
    
  } catch (error) {
    console.error('‚ùå Error optimizando base de datos:', error);
  } finally {
    process.exit(0);
  }
}

optimizeDatabase();
